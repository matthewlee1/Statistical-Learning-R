Boston[row.names(Boston[Boston$rm > 8, ]), ]
hist(Boston$rm)
median(Boston$medv)
![partA](/Fifth Year/Stat4255/img-1743.jpg)
![partA](partA.jpg)
![partA](partA.jpg)
library(ISLR)
summary(Weekly)
?Weekly
?cor
?attach
?plot
cor(Weekly[,9])
cor(Weekly[,-9])
cor(Weekly)
cor(Weekly[-9,])
Weekly[,9]
Weekly[,-9]
Weekly[-9]
Weekly[1]
Weekly[-9]
Weekly[,9]
Weekly[,9]
test1 < - c(1,2,3)
test1
test1 <- c(1,2,3)
test1
test1[,-3]
test1[,]
test1[,1]
test1[,-1]
test2 <- matrix(1:9, nrow = 3, ncol= 3)
test2
test[1]
test2[1]
test2[1,2]
test2[-3]
test2[-1]
test2[-2]
test2[-3]
test2[,-3]
test2[-3,]
library(ISLR)
summary(Weekly)
cor(Weekly[,-9])
?plot
library(ISLR)
summary(Weekly)
cor(Weekly[,-9])
plot(Weekly$Year,Weekly$Volume)
library(ISLR)
summary(Weekly)
cor(Weekly[,-9])
plot(Weekly$Year,Weekly$Volume)
plot(Volume)
library(ISLR)
summary(Weekly)
cor(Weekly[,-9])
plot(Weekly$Year,Weekly$Volume)
plot(Weekly$Volume)
?Weekly$Volume
?Weekly
Weekly$Volume
plot(Weekly$Year,Weekly$Lag1)
fit1 <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data=Weekly, family = binomial)
summary(fit1)
fit1 <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data= Weekly)
fit1 <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data= Weekly, family = binomial)
summary(fit1)
?glm
test2
test2[,3]
glm_probs <- predict(fit1, type = "response")
glm_pred <- rep("Down", lengh(glm_probs))
glm_probs <- predict(fit1, type = "response")
glm_pred <- rep("Down", length(glm_probs))
glm_pred[glm_probs > .5] <- "Up"
table(glm_pred, Direction)
?Weekly
glm_probs <- predict(fit1, type = "response")
glm_pred <- rep("Down", length(glm_probs))
glm_pred[glm_probs > .5] <- "Up"
table(glm_pred, Weekly$Direction)
train <- (Weekly$Year < 2009)
Weekly_910 <- Weekly[!train, ]
Direction_910 <- Weekly$Direction[!train]
fit2 <- glm(Direction ~ Direction ~ Lag2, data= Weekly, family = binomial, subset = train)
train <- (Weekly$Year < 2009)
Weekly_910 <- Weekly[!train, ]
Direction_910 <- Weekly$Direction[!train]
fit2 <- glm(Direction ~ Lag2, data= Weekly, family = binomial, subset = train)
summary(fit2)
test2[1,2]
test2
test2[,2]
test2[2,3]
test2[2,]
test2[,2]
?predict
train <- (Weekly$Year < 2009)
Weekly_910 <- Weekly[!train, ]
Direction_910 <- Weekly$Direction[!train]
fit2 <- glm(Direction ~ Lag2, data= Weekly, family = binomial, subset = train)
summary(fit2)
glm_probs2 <- predict(fit2, Weekly_910, type = "response")
glm_pred2 <- rep("Down", length(glm_probs2))
glm_pred2[glm_probs2 > .5] <- "Up"
table(glm_pred2, Direction_910)
library(MASS)
lda_fit <- lda(Direction ~ Lag2, data = Weekly, subset = train)
lda_fit
library(MASS)
lda_fit <- lda(Direction ~ Lag2, data = Weekly, subset = train)
lda_fit
lda_pred <- predict(lda_fit, Weekly_910)
table(lda_pred$class, Direction_910)
qda_fit <- qda(irection ~ Lag2, data = Weekly, subset = train)
qda_fit <- qda(Direction ~ Lag2, data = Weekly, subset = train)
qda_fit
qda_pred <- predict(qda_fit, Weekly_910)
table(qda_pred$class, Direction_910)
library(CLASS)
library(class)
train_x <- as.matrix(Lag2[train])
library(class)
train_x <- as.matrix(Lag2[train])
library(ISLR)
summary(Weekly)
cor(Weekly[,-9])
plot(Weekly$Year,Weekly$Volume)
fit1 <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data= Weekly, family = binomial)
summary(fit1)
glm_probs <- predict(fit1, type = "response")
glm_pred <- rep("Down", length(glm_probs))
glm_pred[glm_probs > .5] <- "Up"
table(glm_pred, Weekly$Direction)
train <- (Weekly$Year < 2009)
Weekly_910 <- Weekly[!train, ]
Direction_910 <- Weekly$Direction[!train]
fit2 <- glm(Direction ~ Lag2, data= Weekly, family = binomial, subset = train)
summary(fit2)
glm_probs2 <- predict(fit2, Weekly_910, type = "response")
glm_pred2 <- rep("Down", length(glm_probs2))
glm_pred2[glm_probs2 > .5] <- "Up"
table(glm_pred2, Direction_910)
library(MASS)
lda_fit <- lda(Direction ~ Lag2, data = Weekly, subset = train)
lda_fit
lda_pred <- predict(lda_fit, Weekly_910)
table(lda_pred$class, Direction_910)
qda_fit <- qda(Direction ~ Lag2, data = Weekly, subset = train)
qda_fit
qda_pred <- predict(qda_fit, Weekly_910)
table(qda_pred$class, Direction_910)
library(class)
train_x <- as.matrix(Lag2[train])
library(class)
train_x <- as.matrix(Weekly$Lag2[train])
test_x <- as.matrix(Weekly$Lag2[!train])
train_Direction <- Weekly$Direction[train]
set.seed(1)
knn_pred <- knn(train_x, test_x, train_Direction, k =1)
table(knn_pred, Direction_910)
# We can try the with Lag1: Lag2
fit3 <- glm(Direction ~ Lag1:Lag2, data = Weekly, family = binomial, subset = train)
glm_probs3 <- predict(fit3, Weekly_910, type ="response")
glm_pred3 <- rep("Down", length(glm_probs3))
glm_pred3[glm_probs3 > .5] = "Up"
table(glm_pred3, Direction_910)
# We can try the with Lag1: Lag2
fit3 <- glm(Direction ~ Lag1:Lag2, data = Weekly, family = binomial, subset = train)
glm_probs3 <- predict(fit3, Weekly_910, type ="response")
glm_pred3 <- rep("Down", length(glm_probs3))
glm_pred3[glm_probs3 > .5] = "Up"
table(glm_pred3, Direction_910)
mean(pred.glm == Direction_910)
# We can try the with Lag1: Lag2
fit3 <- glm(Direction ~ Lag1:Lag2, data = Weekly, family = binomial, subset = train)
glm_probs3 <- predict(fit3, Weekly_910, type ="response")
glm_pred3 <- rep("Down", length(glm_probs3))
glm_pred3[glm_probs3 > .5] = "Up"
table(glm_pred3, Direction_910)
mean(glm_pred3 == Direction_910)
# We can try the with Lag1: Lag2
fit3 <- glm(Direction ~ Lag1:Lag2, data = Weekly, family = binomial, subset = train)
glm_probs3 <- predict(fit3, Weekly_910, type ="response")
glm_pred3 <- rep("Down", length(glm_probs3))
glm_pred3[glm_probs3 > .5] = "Up"
table(glm_pred3, Direction_910)
mean(glm_pred3 == Direction_910)
#LDA
lda_fit2 <- lda(Direction ~ Lag1:Lag2, data = Weekly, subset = train)
lda_pred2 <- predict(lda_fit2, Weekly_910)
table(lda_pred2, Direction_910)
# We can try the with Lag1: Lag2
fit3 <- glm(Direction ~ Lag1:Lag2, data = Weekly, family = binomial, subset = train)
glm_probs3 <- predict(fit3, Weekly_910, type ="response")
glm_pred3 <- rep("Down", length(glm_probs3))
glm_pred3[glm_probs3 > .5] = "Up"
table(glm_pred3, Direction_910)
mean(glm_pred3 == Direction_910)
#LDA
lda_fit2 <- lda(Direction ~ Lag1:Lag2, data = Weekly, subset = train)
lda_pred2 <- predict(lda_fit2, Weekly_910)
mean(lda_pred2 == Direction_910)
# We can try the with Lag1: Lag2
fit3 <- glm(Direction ~ Lag1:Lag2, data = Weekly, family = binomial, subset = train)
glm_probs3 <- predict(fit3, Weekly_910, type ="response")
glm_pred3 <- rep("Down", length(glm_probs3))
glm_pred3[glm_probs3 > .5] = "Up"
table(glm_pred3, Direction_910)
mean(glm_pred3 == Direction_910)
#LDA
lda_fit2 <- lda(Direction ~ Lag1:Lag2, data = Weekly, subset = train)
lda_pred2 <- predict(lda_fit2, Weekly_910)
mean(lda_pred2 == Direction_910)
# We can try the with Lag1: Lag2
fit3 <- glm(Direction ~ Lag1:Lag2, data = Weekly, family = binomial, subset = train)
glm_probs3 <- predict(fit3, Weekly_910, type ="response")
glm_pred3 <- rep("Down", length(glm_probs3))
glm_pred3[glm_probs3 > .5] = "Up"
table(glm_pred3, Direction_910)
mean(glm_pred3 == Direction_910)
# LDA with Lag1:Lag2
lda_fit2 <- lda(Direction ~ Lag1:Lag2, data = Weekly, subset = train)
lda_pred2 <- predict(lda_fit2, Weekly_910)
mean(lda_pred2 == Direction_910)
# LDA with Lag1:Lag2
lda_fit2 <- lda(Direction ~ Lag1:Lag2, data = Weekly, subset = train)
lda_pred2 <- predict(lda_fit2, Weekly_910)
# LDA with Lag1:Lag2
lda_fit2 <- lda(Direction ~ Lag1:Lag2, data = Weekly, subset = train)
lda_pred2 <- predict(lda_fit2, Weekly_910)
mean(lda_pred2$class == Direction_910)
# LDA with Lag1:Lag2
lda_fit2 <- lda(Direction ~ Lag1:Lag2, data = Weekly, subset = train)
lda_pred2 <- predict(lda_fit2, Weekly_910)
table(lda_pred2$class, Direction_910)
mean(lda_pred2$class == Direction_910)
# QDA with Lag1:Lag2
qda_fit2 <- qda(Direction ~ Lag1:Lag2, data = Weekly, subset = train)
qda_pred2 <- predict(qda_fit2, Weekly_910)
table(qda_pred2$class, Direction_910)
mean(qda_pred2$class == Direction_910)
# Knn k = 5
knn_pred2 <- knn(train_x, test_y, train_Direction, k = 5)
# Knn k = 5
knn_pred2 <- knn(train_x, test_x, train_Direction, k = 5)
table(knn_pred2, Direction_910)
mean(knn_pred2 == Direction_910)
# Knn k = 5
knn_pred2 <- knn(train_x, test_x, train_Direction, k = 5)
table(knn_pred2, Direction_910)
mean(knn_pred2 == Direction_910)
# Knn k = 50
knn_pred3 <- knn(train_x, test_x, train_Direction, k = 50)
table(knn_pred3, Direction_910)
mean(knn_pred3 == Direction_910)
hi
install.packages("reticulate")
library(reticulate)
y
Y
library(reticulate)
Y
yes
n
Y
Y
install.packages("Miniconda")
library(reticulate)
library(reticulate)
use_python("/usr/local/bin/python")
library(reticulate)
use_python("/usr/bin/python")
library(reticulate)
use_python("/usr/bin/python")
library(reticulate)
use_python("/usr/local/bin/python")
library(reticulate)
use_python("/usr/local/bin/python")
library(reticulate)
use_python("/usr/local/bin/python3")
system('export LD_LIBRARY_PATH=/home/craig/anaconda3/lib/:$LD_LIBRARY_PATH')
library(reticulate)
use_python("/usr/local/bin/python3")
library(reticulate)
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
n
Y
"Y"
n
y
n
Y
library(reticulate)
use_python("/usr/bin/python3")
y
y
n
y
n
-Y
--yes
amf;slkdf
;kw
eofq
weokf
qwpoekf
;aksd
;fak
s;
clear
clear()
library(reticulate)
use_python("/usr/bin/python3")
library(reticulate)
use_python("/usr/bin/python3")
use_virtualenv('myenv')
Y
library(reticulate)
use_python("/usr/bin/python3")
repl_python()
library(reticulate)
use_python("/usr/bin/python3")
library(reticulate)
use_python("/usr/bin/python")
library(reticulate)
use_python("/usr/bin/python")
library(reticulate)
use_python("/usr/bin/python")
n <- 1:10000
data.frame(n, 1 - (1 - 1/n)^n) %>%
ggplot(aes(x = n, y = 1-(1-1/n)^n)) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 1 - 1/exp(1), col = "1 - 1/e")) +
scale_x_continuous(limits = c(0, 100)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = c("red")) +
labs(title = "Bootstrap Sampling - Probability obs.j included", y = "Probability", col = "")
n <- 1:10000
data.frame(n, 1 - (1 - 1/n)^n)
ggplot(aes(x = n, y = 1-(1-1/n)^n)) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 1 - 1/exp(1), col = "1 - 1/e")) +
scale_x_continuous(limits = c(0, 100)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = c("red")) +
labs(title = "Bootstrap Sampling - Probability obs.j included", y = "Probability", col = "")
library(ggplot)
library(ggplot2)
n <- 1:10000
data.frame(n, 1 - (1 - 1/n)^n)
ggplot(aes(x = n, y = 1-(1-1/n)^n)) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 1 - 1/exp(1), col = "1 - 1/e")) +
scale_x_continuous(limits = c(0, 100)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = c("red")) +
labs(title = "Bootstrap Sampling - Probability obs.j included", y = "Probability", col = "")
library(ggplot2)
n <- 1:10000
data.frame(n, 1 - (1 - 1/n)^n) %>%
ggplot(aes(x = n, y = 1-(1-1/n)^n)) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 1 - 1/exp(1), col = "1 - 1/e")) +
scale_x_continuous(limits = c(0, 100)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = c("red")) +
labs(title = "Bootstrap Sampling - Probability obs.j included", y = "Probability", col = "")
library(ggplot2)
n <- 1:10000
data.frame(n, 1 - (1 - 1/n)^n)
ggplot(aes(x = n, y = 1-(1-1/n)^n)) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 1 - 1/exp(1), col = "1 - 1/e")) +
scale_x_continuous(limits = c(0, 100)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = c("red")) +
labs(title = "Bootstrap Sampling - Probability obs.j included", y = "Probability", col = "")
n <- 1:10000
data.frame(n, prob_j_included = 1 - (1 - 1/n)^n) %>%
ggplot(aes(x = n, y = prob_j_included)) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 1 - 1/exp(1), col = "1 - 1/e")) +
scale_x_continuous(limits = c(0, 100)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = c("green")) +
labs(title = "Bootstrap Sampling - Probability obs.j included", y = "Probability", col = "")
library(ggplot2)
n <- 1:10000
data.frame(n, prob_j_included = 1 - (1 - 1/n)^n)
ggplot(aes(x = n, y = prob_j_included)) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 1 - 1/exp(1), col = "1 - 1/e")) +
scale_x_continuous(limits = c(0, 100)) +
scale_y_continuous(limits = c(0, 1)) +
scale_color_manual(values = c("green")) +
labs(title = "Bootstrap Sampling - Probability obs.j included", y = "Probability", col = "")
n <- 1:100000
plot(n, 1 - (1 - 1/n)^x)
n <- 1:100000
plot(n, 1 - (1 - 1/n)^x)
n <- 1:100000
plot(n, 1 - (1 - 1/n)^n)
store <- rep(NA, 10000)
for (i in 1:10000) {
store[i] <- sum(sample(1:100, rep = TRUE) == 4) > 0
}
mean(store)
store <- rep(NA, 10000)
for (i in 1:10000) {
store[i] <- sum(sample(1:100, rep = TRUE) == 4) > 0
}
mean(store)
store <- rep(NA, 10000)
for (i in 1:10000) {
store[i] <- sum(sample(1:100, rep = TRUE) == 4) > 0
}
mean(store)
set.seed(1)
attach(Default)
set.seed(1)
library(Default)
set.seed(1)
library(Default)
set.seed(1)
library(Default)
set.seed(1)
library(ISLR)
attach(Default)
set.seed(1)
library(ISLR)
attach(Default)
fit.glm <- glm(default ~ income + balance, data = Default, family = "binomial")
summary(fit.glm)
boot.fn <- function(data, index) {
fit <- glm(default ~ income + balance, data = data, family = "binomial", subset = index)
return (coef(fit))
}
library(boot)
boot(Default, boot.fn, 1000)
boot.fn <- function(data, index) {
fit <- glm(default ~ income + balance, data = data, family = "binomial", subset = index)
return (coef(fit))
}
boot.fn <- function(data, index = 1:nrow(data)) {
coef(glm(default ~ income + balance, data = data, subset = index, family = "binomial"))[-1]
}
boot.fn(Default)
set.seed(1)
(boot_results <- boot(data = Default, statistic = boot.fn, R = 1000))
set.seed(1)
(boot_results <- boot(data = Default, statistic = boot.fn, R = 1000))
n <- 1:100000
plot(n, 1 - (1 - 1/n)^n)
store <- rep(NA, 10000)
for (i in 1:10000) {
store[i] <- sum(sample(1:100, rep = TRUE) == 4) > 0
}
mean(store)
set.seed(1)
library(ISLR)
attach(Default)
fit.glm <- glm(default ~ income + balance, data = Default, family = "binomial")
summary(fit.glm)
boot.fn <- function(data, index = 1:nrow(data)) {
coef(glm(default ~ income + balance, data = data, subset = index, family = "binomial"))[-1]
}
boot.fn(Default)
set.seed(1)
(boot_results <- boot(data = Default, statistic = boot.fn, R = 1000))
set.seed(1)
library(boot)
(boot_results <- boot(data = Default, statistic = boot.fn, R = 1000))
library(boot)
boot(Default, boot.fn, 1000)
boot.fn <- function(data, index = 1:nrow(data)) {
coef(glm(default ~ income + balance, data = data, subset = index, family = "binomial"))[-1]
}
boot.fn(Default)
boot.fn <- function(data, index) {
fit <- glm(default ~ income + balance, data = data, family = "binomial", subset = index)
return (coef(fit))
}
library(boot)
boot(Default, boot.fn, 1000)
n <- 1:100000
plot(n, 1 - (1 - 1/n)^n)
store <- rep(NA, 10000)
for (i in 1:10000) {
store[i] <- sum(sample(1:100, rep = TRUE) == 4) > 0
}
mean(store)
set.seed(1)
library(ISLR)
attach(Default)
fit.glm <- glm(default ~ income + balance, data = Default, family = "binomial")
summary(fit.glm)
boot.fn <- function(data, index) {
fit <- glm(default ~ income + balance, data = data, family = "binomial", subset = index)
return (coef(fit))
}
library(boot)
boot(Default, boot.fn, 1000)
library(boot)
boot(data = Default, boot.fn, 1000)
library(boot)
set.seed(1)
boot(data = Default, statistic = boot.fn, R = 1000)
